tests:
  - description: ':, operator syntax'

  - expr: 'bool_field:'
    error: operand expected

  - description: ':, bool field'

  - expr: 'bool_field:false'
    matches: [1, 3]
  - expr: 'boolField:false'
    matches: [1, 3]
  - expr: 'bool_field:true'
    matches: [2]
  - expr: 'boolField:true'
    matches: [2]

  - description: ':, bool field, negation combinations'

  - expr: '-bool_field:false'
    matches: [2]
  - expr: '-boolField:false'
    matches: [2]
  - expr: '-bool_field:true'
    matches: [1, 3]
  - expr: '-boolField:true'
    matches: [1, 3]

  - expr: 'NOT bool_field:false'
    matches: [2]
  - expr: 'NOT boolField:false'
    matches: [2]
  - expr: 'NOT bool_field:true'
    matches: [1, 3]
  - expr: 'NOT boolField:true'
    matches: [1, 3]

  - expr: 'NOT (bool_field:false)'
    matches: [2]
  - expr: 'NOT (boolField:false)'
    matches: [2]
  - expr: 'NOT (bool_field:true)'
    matches: [1, 3]
  - expr: 'NOT (boolField:true)'
    matches: [1, 3]

  - expr: '-(bool_field:false)'
    matches: [2]
  - expr: '-(boolField:false)'
    matches: [2]
  - expr: '-(bool_field:true)'
    matches: [1, 3]
  - expr: '-(boolField:true)'
    matches: [1, 3]

  - description: '=, operator syntax'

  - expr: '='
    error: invalid term

  - expr: 'bool_field='
    error: invalid term

  - description: '=, bool field'

  - expr: 'bool_field=false'
    matches: [1, 3]
  - expr: 'boolField=false'
    matches: [1, 3]
  - expr: 'bool_field=true'
    matches: [2]
  - expr: 'boolField=true'
    matches: [2]

  - description: '=, bool field, negation combinations'

  - expr: '-bool_field=false'
    matches: [2]
  - expr: '-boolField=false'
    matches: [2]
  - expr: '-bool_field=true'
    matches: [1, 3]
  - expr: '-boolField=true'
    matches: [1, 3]

  - expr: 'NOT bool_field=false'
    matches: [2]
  - expr: 'NOT boolField=false'
    matches: [2]
  - expr: 'NOT bool_field=true'
    matches: [1, 3]
  - expr: 'NOT boolField=true'
    matches: [1, 3]

  - expr: 'NOT (bool_field=false)'
    matches: [2]
  - expr: 'NOT (boolField=false)'
    matches: [2]
  - expr: 'NOT (bool_field=true)'
    matches: [1, 3]
  - expr: 'NOT (boolField=true)'
    matches: [1, 3]

  - expr: '-(bool_field=false)'
    matches: [2]
  - expr: '-(boolField=false)'
    matches: [2]
  - expr: '-(bool_field=true)'
    matches: [1, 3]
  - expr: '-(boolField=true)'
    matches: [1, 3]

  - description: '=, integer field'

  - expr: 'int_field=0'
    matches: [1]
  - expr: 'intField=0'
    matches: [1]
  - expr: 'int_field=1'
    matches: [2]
  - expr: 'intField=1'
    matches: [2]

  - expr: '-int_field=0'
    matches: [2, 3]
  - expr: '-intField=0'
    matches: [2, 3]
  - expr: '-int_field=1'
    matches: [1, 3]
  - expr: '-intField=1'
    matches: [1, 3]

  - expr: 'NOT int_field=0'
    matches: [2, 3]
  - expr: 'NOT intField=0'
    matches: [2, 3]
  - expr: 'NOT int_field=1'
    matches: [1, 3]
  - expr: 'NOT intField=1'
    matches: [1, 3]

  - expr: 'NOT (int_field=0)'
    matches: [2, 3]
  - expr: 'NOT (intField=0)'
    matches: [2, 3]
  - expr: 'NOT (int_field=1)'
    matches: [1, 3]
  - expr: 'NOT (intField=1)'
    matches: [1, 3]

  - expr: '-(int_field=0)'
    matches: [2, 3]
  - expr: '-(intField=0)'
    matches: [2, 3]
  - expr: '-(int_field=1)'
    matches: [1, 3]
  - expr: '-(intField=1)'
    matches: [1, 3]

  - description: '!=, operator syntax'

  - expr: '!='
    error: invalid term

  - expr: 'bool_field!='
    error: invalid term

  - description: '!=, bool field'

  - expr: 'bool_field!=false'
    matches: [2]
  - expr: 'boolField!=false'
    matches: [2]
  - expr: 'bool_field!=true'
    matches: [1, 3]
  - expr: 'boolField!=true'
    matches: [1, 3]

  - description: '!=, bool field, negation combinations'

  - expr: '-bool_field!=false'
    matches: [1, 3]
  - expr: '-boolField!=false'
    matches: [1, 3]
  - expr: '-bool_field!=true'
    matches: [2]
  - expr: '-boolField!=true'
    matches: [2]

  - expr: 'NOT bool_field!=false'
    matches: [1, 3]
  - expr: 'NOT boolField!=false'
    matches: [1, 3]
  - expr: 'NOT bool_field!=true'
    matches: [2]
  - expr: 'NOT boolField!=true'
    matches: [2]

  - expr: 'NOT (bool_field!=false)'
    matches: [1, 3]
  - expr: 'NOT (boolField!=false)'
    matches: [1, 3]
  - expr: 'NOT (bool_field!=true)'
    matches: [2]
  - expr: 'NOT (boolField!=true)'
    matches: [2]

  - expr: '-(bool_field!=false)'
    matches: [1, 3]
  - expr: '-(boolField!=false)'
    matches: [1, 3]
  - expr: '-(bool_field!=true)'
    matches: [2]
  - expr: '-(boolField!=true)'
    matches: [2]

  - description: '!=, integer field'

  - expr: 'int_field!=0'
    matches: [2, 3]
  - expr: 'intField!=0'
    matches: [2, 3]
  - expr: 'int_field!=1'
    matches: [1, 3]
  - expr: 'intField!=1'
    matches: [1, 3]

  - expr: '-int_field!=0'
    matches: [1]
  - expr: '-intField!=0'
    matches: [1]
  - expr: '-intField!=1'
    matches: [2]

  - expr: 'NOT int_field!=0'
    matches: [1]
  - expr: 'NOT intField!=0'
    matches: [1]
  - expr: 'NOT int_field!=1'
    matches: [2]
  - expr: 'NOT intField!=1'
    matches: [2]

  - expr: 'NOT (int_field!=0)'
    matches: [1]
  - expr: 'NOT (intField!=0)'
    matches: [1]
  - expr: 'NOT (int_field!=1)'
    matches: [2]
  - expr: 'NOT (intField!=1)'
    matches: [2]

  - expr: '-(int_field!=0)'
    matches: [1]
  - expr: '-(intField!=0)'
    matches: [1]
  - expr: '-(int_field!=1)'
    matches: [2]
  - expr: '-(intField!=1)'
    matches: [2]

  - description: empty expression

  - expr: ''
    matches: [1, 2, 3]

  - description: unary minus

  - expr: "-1"
    matches: [3]
  - expr: int_field:-1
    matches: [3]
  - expr: int_field = -1
    matches: [3]

  - expr: "-0"
    matches: [1, 2, 3]
  - expr: int_field:-0
    matches: [1]
  - expr: int_field = -0
    matches: [1]

  - description: unary plus

  - expr: "+1"
    matches: [1, 2, 3]
    skip: true
  - expr: int_field:+1
    matches: [2]
    skip: true
  - expr: int_field = +1
    matches: [2]
    skip: true

  - expr: "+0"
    matches: [1, 2, 3]
    skip: true
  - expr: int_field:+0
    matches: [1]
    skip: true
  - expr: int_field = +0
    matches: [1]
    skip: true

  - description: integer terms

  - expr: 'int_field:3'
    matches: []
  - expr: 'int_field:2'
    matches: []
  - expr: 'int_field:1'
    matches: [2]
  - expr: '-int_field:3'
    matches: [1, 2, 3]
  - expr: '-int_field:2'
    matches: [1, 2, 3]
  - expr: '-int_field:1'
    matches: [1, 3]
  - expr: '-int_field:-1'
    matches: [1, 2]
  - expr: 'NOT int_field:3'
    matches: [1, 2, 3]
  - expr: 'NOT int_field:2'
    matches: [1, 2, 3]
  - expr: 'NOT int_field:1'
    matches: [1, 3]
  - expr: 'NOT int_field:-1'
    matches: [1, 2]

  - expr: 'int_field=3'
    matches: []
  - expr: 'int_field=2'
    matches: []
  - expr: 'int_field=-1'
    matches: [3]
  - expr: '-int_field=3'
    matches: [1, 2, 3]
  - expr: '-int_field=2'
    matches: [1, 2, 3]
  - expr: '-int_field=-1'
    matches: [1, 2]
  - expr: 'NOT int_field=3'
    matches: [1, 2, 3]
  - expr: 'NOT int_field=2'
    matches: [1, 2, 3]
  - expr: 'NOT int_field=-1'
    matches: [1, 2]

  - expr: int_field<3
    matches: [1, 2, 3]
  - expr: int_field<2
    matches: [1, 2, 3]
  - expr: int_field<1
    matches: [1, 3]
  - expr: int_field<-1
    matches: []
  - expr: -int_field<3
    matches: []
  - expr: -int_field<2
    matches: []
  - expr: -int_field<1
    matches: [2]
  - expr: -int_field<-1
    matches: [1, 2, 3]
  - expr: NOT int_field<3
    matches: []
  - expr: NOT int_field<2
    matches: []
  - expr: NOT int_field<1
    matches: [2]
  - expr: NOT int_field<-1
    matches: [1, 2, 3]

  - expr: 'int_field<=3'
    matches: [1, 2, 3]
  - expr: 'int_field<=2'
    matches: [1, 2, 3]
  - expr: 'int_field<=1'
    matches: [1, 2, 3]
  - expr: 'int_field<=-1'
    matches: [3]
  - expr: '-int_field<=3'
    matches: []
  - expr: '-int_field<=2'
    matches: []
  - expr: '-int_field<=1'
    matches: []
  - expr: '-int_field<=-1'
    matches: [1, 2]
  - expr: 'NOT int_field<=3'
    matches: []
  - expr: 'NOT int_field<=2'
    matches: []
  - expr: 'NOT int_field<=1'
    matches: []
  - expr: 'NOT int_field<=-1'
    matches: [1, 2]

  - expr: 'int_field>=3'
    matches: []
  - expr: 'int_field>=2'
    matches: []
  - expr: 'int_field>=1'
    matches: [2]
  - expr: 'int_field>=-1'
    matches: [1, 2, 3]
  - expr: '-int_field>=3'
    matches: [1, 2, 3]
  - expr: '-int_field>=2'
    matches: [1, 2, 3]
  - expr: '-int_field>=1'
    matches: [1, 3]
  - expr: '-int_field>=-1'
    matches: []
  - expr: 'NOT int_field>=3'
    matches: [1, 2, 3]
  - expr: 'NOT int_field>=2'
    matches: [1, 2, 3]
  - expr: 'NOT int_field>=1'
    matches: [1, 3]
  - expr: 'NOT int_field>=-1'
    matches: []

  - expr: 'int_field>3'
    matches: []
  - expr: 'int_field>2'
    matches: []
  - expr: 'int_field>1'
    matches: []
  - expr: 'int_field>-1'
    matches: [1, 2]
  - expr: '-int_field>3'
    matches: [1, 2, 3]
  - expr: '-int_field>2'
    matches: [1, 2, 3]
  - expr: '-int_field>1'
    matches: [1, 2, 3]
  - expr: '-int_field>-1'
    matches: [3]
  - expr: 'NOT int_field>3'
    matches: [1, 2, 3]
  - expr: 'NOT int_field>2'
    matches: [1, 2, 3]
  - expr: 'NOT int_field>1'
    matches: [1, 2, 3]
  - expr: 'NOT int_field>-1'
    matches: [3]

  - expr: 'int_field!=3'
    matches: [1, 2, 3]
  - expr: 'int_field!=2'
    matches: [1, 2, 3]
  - expr: 'int_field!=-1'
    matches: [1, 2]
  - expr: '-int_field!=3'
    matches: []
  - expr: '-int_field!=2'
    matches: []
  - expr: '-int_field!=1'
    matches: [2]
  - expr: '-int_field!=-1'
    matches: [3]
  - expr: 'NOT int_field!=3'
    matches: []
  - expr: 'NOT int_field!=2'
    matches: []
  - expr: 'NOT int_field!=-1'
    matches: [3]

  - description: numeric operand mismatches

  - expr: 'string_field > 1.23'
    matches: [2, 3]
  - expr: 'int_field > 1.23'
    error: operand type mismatch

  - description: Boolean terms

  - expr: 'false:0'
    matches: [1, 2, 3]
  - expr: 'false:False'
    matches: [1, 2, 3]
  - expr: 'false:false'
    matches: [1, 2, 3]
  - expr: 'false:1'
    matches: []

  - expr: 'false:True'
    matches: []
  - expr: 'false:true'
    matches: []

  - expr: 'true:0'
    matches: [2, 3]
  - expr: 'true:False'
    matches: [2, 3]
  - expr: 'true:false'
    matches: [2, 3]
  - expr: 'true:1'
    matches: [1]

  - expr: 'true:True'
    matches: [1]
  - expr: 'true:true'
    matches: [1]

  - expr: 'false=0'
    matches: [1, 2, 3]
  - expr: 'false=False'
    matches: [1, 2, 3]
  - expr: 'false=false'
    matches: [1, 2, 3]
  - expr: 'false=1'
    matches: []

  - expr: 'false=True'
    matches: []
  - expr: 'false=true'
    matches: []

  - expr: 'true=0'
    matches: [2, 3]
  - expr: 'true=False'
    matches: [2, 3]
  - expr: 'true=false'
    matches: [2, 3]
  - expr: 'true=1'
    matches: [1]

  - expr: 'true=True'
    matches: [1]
  - expr: 'true=true'
    matches: [1]

  - description: case sensitive equality

  - expr: 'case_field=ing'
    matches: []
  - expr: 'case_field=Str'
    matches: []
  - expr: 'case_field=string'
    matches: [1, 2, 3]
  - expr: 'case_field=String'
    matches: [1, 2, 3]
  - expr: 'case_field=STRING'
    matches: [1, 2, 3]

  - expr: 'undefined=String'
    matches: []
  - expr: 'undefined=STRING'
    matches: []
  - expr: 'undefined=string'
    matches: []
  - expr: 'undefined=Str'
    matches: []
  - expr: 'undefined=ing'
    matches: []

  - description: 'case insensitive : string match'

  - expr: 'case_field:String'
    matches: [1, 2, 3]
  - expr: 'case_field:STRING'
    matches: [1, 2, 3]
  - expr: 'case_field:string'
    matches: [1, 2, 3]
  - expr: 'case_field:Str'
    matches: []

  - expr: 'case_field:ing'
    matches: []

  - expr: 'undefined:STRING'
    matches: []
  - expr: 'undefined:Str'
    matches: []
  - expr: 'undefined:String'
    matches: []
  - expr: 'undefined:ing'
    matches: []
  - expr: 'undefined:string'
    matches: []

  - description: 'anchored prefix/suffix case insensitive : string match'

  - expr: 'case_field:*'
    matches: [1, 2, 3]
  - expr: 'case_field:S*'
    matches: [1, 2, 3]

  - expr: 'case_field:STR*'
    matches: [1, 2, 3]

  - expr: 'case_field:Str*'
    matches: [1, 2, 3]

  - expr: 'case_field:s*'
    matches: [1, 2, 3]

  - expr: 'case_field:str*'
    matches: [1, 2, 3]

  - expr: 'undefined:""'
    matches: [1, 2, 3]
  - expr: 'undefined:*'
    matches: []

  - expr: 'undefined:str*'
    matches: []

  - description: ': docstring examples'

  - expr: 'subject:""'
    matches: []

  - expr: 'subject:*'
    matches: [1, 2, 3]
  - expr: 'subject:def'
    matches: [1]

  - expr: 'subject:def*'
    matches: [1, 2, 3]

  - expr: 'subject:defghi*'
    matches: [2, 3]

  - expr: 'subject:defghijkl*'
    matches: [3]

  - expr: 'subject:ghi'
    matches: []

  - expr: 'subject:ghi*'
    matches: []
  - expr: 'subject:ghijkl*'
    matches: []
  - expr: 'subject:jkl*'
    matches: []

  - description: ': word matching'

  - expr: 'words:jack'
    matches: [1]

  - expr: 'words:go*'
    matches: [2, 3]

  - expr: 'words:b*'
    matches: [2, 3]

  - description: empty string

  - expr: 'none:""'
    matches: [1, 2, 3]
  - expr: 'none:0'
    matches: []
  - expr: 'none:False'
    matches: []
  - expr: 'none:false'
    matches: []
  - expr: 'none:1'
    matches: []
  - expr: 'none:True'
    matches: []
  - expr: 'none:true'
    matches: []
  - expr: 'none:*'
    matches: []

  - expr: 'none=""'
    matches: [1, 2, 3]
  - expr: 'none=0'
    matches: []
  - expr: 'none=False'
    matches: []
  - expr: 'none=false'
    matches: []
  - expr: 'none=1'
    matches: []
  - expr: 'none=True'
    matches: []
  - expr: 'none=true'
    matches: []

  - description: null value

  - expr: 'compound.str.dictionary.none:""'
    matches: [1, 2, 3]

  - expr: 'compound.str.dictionary.none:0'
    matches: []
  - expr: 'compound.str.dictionary.none:False'
    matches: []
  - expr: 'compound.str.dictionary.none:false'
    matches: []
  - expr: 'compound.str.dictionary.none:1'
    matches: []
  - expr: 'compound.str.dictionary.none:True'
    matches: []
  - expr: 'compound.str.dictionary.none:true'
    matches: []
  - expr: 'compound.str.dictionary.none:*'
    matches: []

  - expr: 'compound.str.dictionary.none=""'
    matches: [1, 2, 3]

  - expr: 'compound.str.dictionary.none=0'
    matches: []
  - expr: 'compound.str.dictionary.none=False'
    matches: []
  - expr: 'compound.str.dictionary.none=false'
    matches: []
  - expr: 'compound.str.dictionary.none=1'
    matches: []
  - expr: 'compound.str.dictionary.none=True'
    matches: []
  - expr: 'compound.str.dictionary.none=true'
    matches: []

  - description: 'Double quoted string operands for :.'

  - expr: 'case_field:"STRING"'
    matches: [1, 2, 3]
  - expr: 'case_field:"Str"'
    matches: []

  - expr: 'case_field:"Str*"'
    matches: [1, 2, 3]

  - expr: 'case_field:"ri"'
    matches: []

  - expr: 'case_field:"rI"'
    matches: []

  - expr: 'case_field:"StrIng"'
    matches: [1, 2, 3]
  - expr: 'case_field:"String"'
    matches: [1, 2, 3]
  - expr: 'case_field:"ing"'
    matches: []

  - expr: 'case_field:"string"'
    matches: [1, 2, 3]

  - expr: 'undefined:"STRING"'
    matches: []
  - expr: 'undefined:"Str"'
    matches: []
  - expr: 'undefined:"String"'
    matches: []
  - expr: 'undefined:"ing"'
    matches: []
  - expr: 'undefined:"string"'
    matches: []

  - expr: 'compound.str.value:"Compound String"'
    matches: []
  - expr: 'compound.str.value:"Compound string"'
    matches: []
  - expr: 'compound.str.value:"compound string"'
    matches: []

  - description: 'Double quoted string operands for ='

  - expr: 'case_field="str"'
    matches: []
  - expr: 'case_field="Str"'
    matches: []
  - expr: 'case_field="ing"'
    matches: []
  - expr: 'case_field="Ing"'
    matches: []
  - expr: 'case_field="string"'
    matches: [1, 2, 3]
  - expr: 'case_field="String"'
    matches: [1, 2, 3]
  - expr: 'case_field="StrIng"'
    matches: [1, 2, 3]
  - expr: 'case_field="STRING"'
    matches: [1, 2, 3]

  - expr: 'undefined="ing"'
    matches: []
  - expr: 'undefined="Str"'
    matches: []
  - expr: 'undefined="string"'
    matches: []
  - expr: 'undefined="String"'
    matches: []
  - expr: 'undefined="STRING"'
    matches: []

  - expr: 'compound.str.value="compound string"'
    matches: []
  - expr: 'compound.str.value="Compound string"'
    matches: []
  - expr: 'compound.str.value="Compound String"'
    matches: []

  - description: '(number, string) X (list, dict) : tests'

  - expr: 'compound.num.array:1'
    matches: [1]
  - expr: 'compound.num.array:3.14'
    matches: []
  - expr: 'compound.num.array:5'
    matches: []
  - expr: 'compound.num.array:abc'
    error: operand type mismatch

  - expr: 'compound.num.array:Abc'
    error: operand type mismatch

  - expr: 'compound.num.dictionary.xyz=123'
    matches: [1]
  - expr: 'compound.num.dictionary.ghi=789'
    matches: []

  - expr: 'compound.num.dictionary.ghI=789'
    matches: [1, 2]
  - expr: 'compound.num.dictionary.jkl=1024'
    matches: []

  - expr: 'compound.num.dictionary.Jkl=1024'
    matches: [2]
  - expr: 'compound.num.dictionary.jkl=4'
    matches: []

  - expr: 'compound.num.dictionary.Jkl=4'
    matches: [3]

  - expr: 'compound.str.array:1'
    matches: []
  - expr: 'compound.str.array:3.14'
    matches: []
  - expr: 'compound.str.array:5'
    matches: []
  - expr: 'compound.str.array:abc'
    matches: []
  - expr: 'compound.str.array:Abc'
    matches: []
  - expr: 'compound.str.array:ab'
    matches: []
  - expr: 'compound.str.array:b'
    matches: []
  - expr: 'compound.str.array:ab*'
    matches: []
  - expr: 'compound.str.array:*bC'
    error: suffix matching not supported

  - description: 'string X (list, dict) = tests'

  - expr: 'compound.str.array=ab'
    matches: []
    skip: true

  - description: OR precedence over adjacent conjunction

  - expr: 'int_field:0 int_field:0 OR int_field:0'
    matches: [1]
  - expr: '(int_field:0 int_field:0) OR int_field:0'
    matches: [1]
  - expr: 'int_field:0 (int_field:0 OR int_field:0)'
    matches: [1]

  - expr: 'int_field:0 int_field:0 OR int_field:2'
    matches: [1]
  - expr: '(int_field:0 int_field:0) OR int_field:2'
    matches: [1]
  - expr: 'int_field:0 (int_field:0 OR int_field:2)'
    matches: [1]

  - expr: 'int_field:0 int_field:2 OR int_field:0'
    matches: [1]
  - expr: '(int_field:0 int_field:2) OR int_field:0'
    matches: [1]
  - expr: 'int_field:0 (int_field:2 OR int_field:0)'
    matches: [1]

  - expr: 'int_field:0 int_field:2 OR int_field:2'
    matches: []
  - expr: '(int_field:0 int_field:2) OR int_field:2'
    matches: []
  - expr: 'int_field:0 (int_field:2 OR int_field:2)'
    matches: []

  - expr: 'int_field:2 int_field:0 OR int_field:0'
    matches: []
  - expr: '(int_field:2 int_field:0) OR int_field:0'
    matches: [1]
  - expr: 'int_field:2 (int_field:0 OR int_field:0)'
    matches: []

  - expr: 'int_field:2 int_field:0 OR int_field:2'
    matches: []
  - expr: '(int_field:2 int_field:0) OR int_field:2'
    matches: []
  - expr: 'int_field:2 (int_field:0 OR int_field:2)'
    matches: []

  - expr: 'int_field:2 int_field:2 OR int_field:0'
    matches: []
  - expr: '(int_field:2 int_field:2) OR int_field:0'
    matches: [1]
  - expr: 'int_field:2 (int_field:2 OR int_field:0)'
    matches: []

  - expr: 'int_field:2 int_field:2 OR int_field:2'
    matches: []
  - expr: '(int_field:2 int_field:2) OR int_field:2'
    matches: []
  - expr: 'int_field:2 (int_field:2 OR int_field:2)'
    matches: []

  - expr: 'int_field:0 OR int_field:0 int_field:0'
    matches: [1]
  - expr: 'int_field:0 OR (int_field:0 int_field:0)'
    matches: [1]
  - expr: '(int_field:0 OR int_field:0) int_field:0'
    matches: [1]

  - expr: 'int_field:0 OR int_field:0 int_field:2'
    matches: []
  - expr: 'int_field:0 OR (int_field:0 int_field:2)'
    matches: [1]
  - expr: '(int_field:0 OR int_field:0) int_field:2'
    matches: []

  - expr: 'int_field:0 OR int_field:2 int_field:0'
    matches: [1]
  - expr: 'int_field:0 OR (int_field:2 int_field:0)'
    matches: [1]
  - expr: '(int_field:0 OR int_field:2) int_field:0'
    matches: [1]

  - expr: 'int_field:0 OR int_field:2 int_field:2'
    matches: []
  - expr: 'int_field:0 OR (int_field:2 int_field:2)'
    matches: [1]
  - expr: '(int_field:0 OR int_field:2) int_field:2'
    matches: []

  - expr: 'int_field:2 OR int_field:0 int_field:0'
    matches: [1]
  - expr: 'int_field:2 OR (int_field:0 int_field:0)'
    matches: [1]
  - expr: '(int_field:2 OR int_field:0) int_field:0'
    matches: [1]

  - expr: 'int_field:2 OR int_field:0 int_field:2'
    matches: []
  - expr: 'int_field:2 OR (int_field:0 int_field:2)'
    matches: []
  - expr: '(int_field:2 OR int_field:0) int_field:2'
    matches: []

  - expr: 'int_field:2 OR int_field:2 int_field:0'
    matches: []
  - expr: 'int_field:2 OR (int_field:2 int_field:0)'
    matches: []
  - expr: '(int_field:2 OR int_field:2) int_field:0'
    matches: []

  - expr: 'int_field:2 OR int_field:2 int_field:2'
    matches: []
  - expr: 'int_field:2 OR (int_field:2 int_field:2)'
    matches: []
  - expr: '(int_field:2 OR int_field:2) int_field:2'
    matches: []

  - expr: 'int_field=2 OR float_field=3.14'
    matches: []
  - expr: 'int_field=2 float_field=3.14'
    matches: []
  - expr: 'int_field=2 ( float_field=3.14 )'
    matches: []
  - expr: '( int_field=2 ) float_field=3.14'
    matches: []
  - expr: '( int_field=2 float_field=3.14 )'
    matches: []

  - description: AND, NOT OR and (...) combinations

  - expr: 'int_field:1 AND ( int_field:1 OR int_field:1 )'
    matches: [2]
  - expr: 'int_field:1 AND ( int_field:1 OR int_field:0 )'
    matches: [2]
  - expr: 'int_field:1 AND ( int_field:0 OR int_field:1 )'
    matches: [2]
  - expr: 'int_field:1 AND ( int_field:0 OR int_field:0 )'
    matches: []
  - expr: 'int_field:0 AND ( int_field:1 OR int_field:1 )'
    matches: []
  - expr: 'int_field:0 AND ( int_field:1 OR int_field:0 )'
    matches: [1]
  - expr: 'int_field:0 AND ( int_field:0 OR int_field:1 )'
    matches: [1]
  - expr: 'int_field:0 AND ( int_field:0 OR int_field:0 )'
    matches: [1]

  - expr: '( int_field:1 OR int_field:1 ) AND int_field:1'
    matches: [2]
  - expr: '( int_field:0 OR int_field:1 ) AND int_field:1'
    matches: [2]
  - expr: '( int_field:1 OR int_field:1 ) AND int_field:0'
    matches: []
  - expr: '( int_field:0 OR int_field:1 ) AND int_field:0'
    matches: [1]
  - expr: '( int_field:1 OR int_field:0 ) AND int_field:1'
    matches: [2]
  - expr: '( int_field:0 OR int_field:0 ) AND int_field:1'
    matches: []
  - expr: '( int_field:1 OR int_field:0 ) AND int_field:0'
    matches: [1]
  - expr: '( int_field:0 OR int_field:0 ) AND int_field:0'
    matches: [1]

  - expr: 'NOT int_field:1 AND ( int_field:1 OR int_field:1 )'
    matches: []
  - expr: 'NOT int_field:1 AND ( int_field:1 OR int_field:0 )'
    matches: [1]
  - expr: 'NOT int_field:1 AND ( int_field:0 OR int_field:1 )'
    matches: [1]
  - expr: 'NOT int_field:1 AND ( int_field:0 OR int_field:0 )'
    matches: [1]
  - expr: 'NOT int_field:0 AND ( int_field:1 OR int_field:1 )'
    matches: [2]
  - expr: 'NOT int_field:0 AND ( int_field:1 OR int_field:0 )'
    matches: [2]
  - expr: 'NOT int_field:0 AND ( int_field:0 OR int_field:1 )'
    matches: [2]
  - expr: 'NOT int_field:0 AND ( int_field:0 OR int_field:0 )'
    matches: []

  - expr: 'NOT ( int_field:1 OR int_field:1 ) AND int_field:1'
    matches: []
  - expr: 'NOT ( int_field:0 OR int_field:1 ) AND int_field:1'
    matches: []
  - expr: 'NOT ( int_field:1 OR int_field:1 ) AND int_field:0'
    matches: [1]
  - expr: 'NOT ( int_field:0 OR int_field:1 ) AND int_field:0'
    matches: []
  - expr: 'NOT ( int_field:1 OR int_field:0 ) AND int_field:1'
    matches: []
  - expr: 'NOT ( int_field:0 OR int_field:0 ) AND int_field:1'
    matches: [2]
  - expr: 'NOT ( int_field:1 OR int_field:0 ) AND int_field:0'
    matches: []
  - expr: 'NOT ( int_field:0 OR int_field:0 ) AND int_field:0'
    matches: []

  - description: Adds (...) to achieve standard AND/OR precedence.

  - expr: '(int_field>0 AND float_field>0) OR int_field>0'
    matches: [2]
  - expr: '(int_field>0 AND float_field>0) OR int_field<0'
    matches: [2, 3]
  - expr: '(int_field>0 AND float_field<0) OR int_field>0'
    matches: [2]
  - expr: '(int_field>0 AND float_field<0) OR int_field<0'
    matches: [3]
  - expr: '(int_field<0 AND float_field>0) OR int_field>0'
    matches: [2]
  - expr: '(int_field<0 AND float_field>0) OR int_field<0'
    matches: [3]
  - expr: '(int_field<0 AND float_field<0) OR int_field>0'
    matches: [2, 3]
  - expr: '(int_field<0 AND float_field<0) OR int_field<0'
    matches: [3]

  - expr: 'int_field>0 OR (int_field>0 AND float_field>0)'
    matches: [2]
  - expr: 'int_field<0 OR (int_field>0 AND float_field>0)'
    matches: [2, 3]
  - expr: 'int_field>0 OR (int_field>0 AND float_field<0)'
    matches: [2]
  - expr: 'int_field<0 OR (int_field>0 AND float_field<0)'
    matches: [3]
  - expr: 'int_field>0 OR (int_field<0 AND float_field>0)'
    matches: [2]
  - expr: 'int_field<0 OR (int_field<0 AND float_field>0)'
    matches: [3]
  - expr: 'int_field>0 OR (int_field<0 AND float_field<0)'
    matches: [2, 3]
  - expr: 'int_field<0 OR (int_field<0 AND float_field<0)'
    matches: [3]

  - expr: '(NOT int_field>0 AND float_field>0) OR int_field>0'
    matches: [2]
  - expr: '(NOT int_field>0 AND float_field>0) OR int_field<0'
    matches: [3]
  - expr: '(NOT int_field>0 AND float_field<0) OR int_field>0'
    matches: [2, 3]
  - expr: '(NOT int_field>0 AND float_field<0) OR int_field<0'
    matches: [3]
  - expr: '(NOT int_field<0 AND float_field>0) OR int_field>0'
    matches: [2]
  - expr: '(NOT int_field<0 AND float_field>0) OR int_field<0'
    matches: [2, 3]
  - expr: '(NOT int_field<0 AND float_field<0) OR int_field>0'
    matches: [2]
  - expr: '(NOT int_field<0 AND float_field<0) OR int_field<0'
    matches: [3]

  - expr: 'NOT int_field>0 OR (int_field>0 AND float_field>0)'
    matches: [1, 2, 3]
  - expr: 'NOT int_field<0 OR (int_field>0 AND float_field>0)'
    matches: [1, 2]
  - expr: 'NOT int_field>0 OR (int_field>0 AND float_field<0)'
    matches: [1, 3]
  - expr: 'NOT int_field<0 OR (int_field>0 AND float_field<0)'
    matches: [1, 2]
  - expr: 'NOT int_field>0 OR (int_field<0 AND float_field>0)'
    matches: [1, 3]
  - expr: 'NOT int_field<0 OR (int_field<0 AND float_field>0)'
    matches: [1, 2]
  - expr: 'NOT int_field>0 OR (int_field<0 AND float_field<0)'
    matches: [1, 3]
  - expr: 'NOT int_field<0 OR (int_field<0 AND float_field<0)'
    matches: [1, 2, 3]

  - expr: '(int_field:0 AND int_field:0) OR int_field:0'
    matches: [1]
  - expr: '(int_field:0 AND int_field:0) OR int_field:2'
    matches: [1]
  - expr: '(int_field:0 AND int_field:2) OR int_field:0'
    matches: [1]
  - expr: '(int_field:0 AND int_field:2) OR int_field:2'
    matches: []
  - expr: '(int_field:2 AND int_field:0) OR int_field:0'
    matches: [1]

  - expr: '(int_field:2 AND int_field:0) OR int_field:2'
    matches: []
  - expr: '(int_field:2 AND int_field:2) OR int_field:0'
    matches: [1]
  - expr: '(int_field:2 AND int_field:2) OR int_field:2'
    matches: []

  - expr: 'int_field:0 OR (int_field:0 AND int_field:0)'
    matches: [1]
  - expr: 'int_field:0 OR (int_field:0 AND int_field:2)'
    matches: [1]
  - expr: 'int_field:0 OR (int_field:2 AND int_field:0)'
    matches: [1]

  - expr: 'int_field:0 OR (int_field:2 AND int_field:2)'
    matches: [1]
  - expr: 'int_field:2 OR (int_field:0 AND int_field:0)'
    matches: [1]
  - expr: 'int_field:2 OR (int_field:0 AND int_field:2)'
    matches: []
  - expr: 'int_field:2 OR (int_field:2 AND int_field:0)'
    matches: []
  - expr: 'int_field:2 OR (int_field:2 AND int_field:2)'
    matches: []

  - description: AND/OR precedence ambiguity?

  - expr: 'axx AND bxx OR cxx'
    matches: []
  - expr: 'axx OR bxx AND cxx'
    matches: []

  - expr: 'xaa AND yaa OR zaa'
    error: parenthesis grouping required when AND and OR are combined
  - expr: 'xaa OR yaa AND zaa'
    error: parenthesis grouping required when AND and OR are combined

  - expr: 'int_field:12345 AND int_field:12345 OR int_field:12345'
    matches: []
  - expr: 'int_field:12345 OR int_field:12345 AND int_field:12345'
    matches: []

  - expr: 'int_field:67890 AND int_field:67890 OR int_field:67890'
    error: parenthesis grouping required when AND and OR are combined
  - expr: 'int_field:67890 OR int_field:67890 AND int_field:67890'
    error: parenthesis grouping required when AND and OR are combined

  - expr: 'int_field:0 OR int_field:0 AND int_field:0'
    matches: [1]
    skip: true
  - expr: 'int_field:0 OR int_field:0 AND int_field:1'
    matches: [1]
    skip: true
  - expr: 'int_field:0 OR int_field:0 AND int_field:2'
    matches: []
  - expr: 'int_field:0 OR int_field:1 AND int_field:0'
    matches: [1]
  - expr: 'int_field:0 OR int_field:1 AND int_field:1'
    matches: [2]
  - expr: 'int_field:0 OR int_field:1 AND int_field:2'
    matches: []
  - expr: 'int_field:0 OR int_field:2 AND int_field:0'
    matches: [1]
  - expr: 'int_field:0 OR int_field:2 AND int_field:1'
    matches: []
  - expr: 'int_field:0 OR int_field:2 AND int_field:2'
    matches: []

  - expr: 'int_field:1 OR int_field:0 AND int_field:0'
    matches: [1]
  - expr: 'int_field:1 OR int_field:0 AND int_field:1'
    matches: [2]
  - expr: 'int_field:1 OR int_field:0 AND int_field:2'
    matches: []
  - expr: 'int_field:1 OR int_field:1 AND int_field:0'
    matches: []
  - expr: 'int_field:1 OR int_field:1 AND int_field:1'
    matches: [2]
  - expr: 'int_field:1 OR int_field:1 AND int_field:2'
    matches: []
  - expr: 'int_field:1 OR int_field:2 AND int_field:0'
    matches: []
  - expr: 'int_field:1 OR int_field:2 AND int_field:1'
    matches: [2]
  - expr: 'int_field:1 OR int_field:2 AND int_field:2'
    matches: []

  - expr: 'int_field:2 OR int_field:0 AND int_field:0'
    matches: [1]
  - expr: 'int_field:2 OR int_field:0 AND int_field:1'
    matches: []
  - expr: 'int_field:2 OR int_field:0 AND int_field:2'
    matches: []
  - expr: 'int_field:2 OR int_field:1 AND int_field:0'
    matches: []
  - expr: 'int_field:2 OR int_field:1 AND int_field:1'
    matches: [2]
  - expr: 'int_field:2 OR int_field:1 AND int_field:2'
    matches: []
  - expr: 'int_field:2 OR int_field:2 AND int_field:0'
    matches: [1]
    skip: true
  - expr: 'int_field:2 OR int_field:2 AND int_field:1'
    matches: []
  - expr: 'int_field:2 OR int_field:2 AND int_field:2'
    matches: []

  - description: '> 1 of the same operator for off-by-1 grammar production bugs'

  - expr: 'int_field:1 AND int_field:2 AND int_field:3'
    matches: []
  - expr: 'int_field>1 AND int_field:2 AND int_field<3'
    matches: []
  - expr: 'int_field:1 OR int_field:2 OR int_field:3'
    matches: [2]
  - expr: 'int_field<1 OR -int_field:2 OR int_field>3'
    matches: [1, 2, 3]

  - description: (...) nesting

  - expr: '( int_field:0 OR int_field:0 ) AND ( int_field:0 OR int_field:0 )'
    matches: [1]
  - expr: '( int_field:0 OR int_field:0 ) AND ( int_field:0 OR int_field:1 )'
    matches: [1]
  - expr: '( int_field:0 OR int_field:0 ) AND ( int_field:1 OR int_field:0 )'
    matches: [1]
  - expr: '( int_field:0 OR int_field:0 ) AND ( int_field:1 OR int_field:1 )'
    matches: []

  - expr: '( int_field:0 OR int_field:1 ) AND ( int_field:0 OR int_field:0 )'
    matches: [1]
  - expr: '( int_field:0 OR int_field:1 ) AND ( int_field:0 OR int_field:1 )'
    matches: [1, 2]
  - expr: '( int_field:0 OR int_field:1 ) AND ( int_field:1 OR int_field:0 )'
    matches: [1, 2]
  - expr: '( int_field:0 OR int_field:1 ) AND ( int_field:1 OR int_field:1 )'
    matches: [2]

  - expr: '( int_field:1 OR int_field:0 ) AND ( int_field:0 OR int_field:0 )'
    matches: [1]
  - expr: '( int_field:1 OR int_field:0 ) AND ( int_field:0 OR int_field:1 )'
    matches: [1, 2]
  - expr: '( int_field:1 OR int_field:0 ) AND ( int_field:1 OR int_field:0 )'
    matches: [1, 2]
  - expr: '( int_field:1 OR int_field:0 ) AND ( int_field:1 OR int_field:1 )'
    matches: [2]

  - expr: '( int_field:1 OR int_field:1 ) AND ( int_field:0 OR int_field:0 )'
    matches: []
  - expr: '( int_field:1 OR int_field:1 ) AND ( int_field:0 OR int_field:1 )'
    matches: [2]
  - expr: '( int_field:1 OR int_field:1 ) AND ( int_field:1 OR int_field:0 )'
    matches: [2]
  - expr: '( int_field:1 OR int_field:1 ) AND ( int_field:1 OR int_field:1 )'
    matches: [2]

  - description: space combinations

  - expr: 'int_field:2  '
    matches: []
  - expr: 'int_field:  2'
    matches: []
  - expr: 'int_field  :2'
    matches: []
  - expr: '  int_field:2'
    matches: []
  - expr: 'int_field:  2  '
    matches: []
  - expr: 'int_field  :2  '
    matches: []
  - expr: '  int_field:2  '
    matches: []
  - expr: 'int_field  :  2'
    matches: []
  - expr: '  int_field:  2'
    matches: []
  - expr: '  int_field  :2'
    matches: []
  - expr: 'int_field  :  2  '
    matches: []
  - expr: '  int_field:  2  '
    matches: []
  - expr: ' int_field :  2'
    matches: []
  - expr: '  int_field  :  2  '
    matches: []

  - expr: '-int_field:2  '
    matches: [1, 2, 3]
  - expr: '-int_field:  2'
    matches: [1, 2, 3]
  - expr: '-int_field  :2'
    matches: [1, 2, 3]
  - expr: '-int_field:  2  '
    matches: [1, 2, 3]
  - expr: '-int_field  :2  '
    matches: [1, 2, 3]
  - expr: '-int_field  :  2'
    matches: [1, 2, 3]
  - expr: '-int_field  :  2  '
    matches: [1, 2, 3]

  - expr: '  -int_field:2'
    matches: [1, 2, 3]
  - expr: '  -int_field:2  '
    matches: [1, 2, 3]
  - expr: '  -int_field:  2'
    matches: [1, 2, 3]
  - expr: '  -int_field  :2'
    matches: [1, 2, 3]
  - expr: '  -int_field:  2  '
    matches: [1, 2, 3]
  - expr: '  -int_field  :2  '
    matches: [1, 2, 3]
  - expr: '  -int_field  :  2'
    matches: [1, 2, 3]
  - expr: '  -int_field  :  2  '
    matches: [1, 2, 3]

  - expr: 'NOT  int_field:2'
    matches: [1, 2, 3]
  - expr: 'NOT  int_field:2  '
    matches: [1, 2, 3]
  - expr: 'NOT  int_field:  2'
    matches: [1, 2, 3]
  - expr: 'NOT  int_field  :2'
    matches: [1, 2, 3]
  - expr: 'NOT    int_field:2'
    matches: [1, 2, 3]
  - expr: 'NOT  int_field:  2  '
    matches: [1, 2, 3]
  - expr: 'NOT  int_field  :2  '
    matches: [1, 2, 3]
  - expr: 'NOT    int_field:2  '
    matches: [1, 2, 3]
  - expr: 'NOT  int_field  :  2'
    matches: [1, 2, 3]
  - expr: 'NOT    int_field:  2'
    matches: [1, 2, 3]
  - expr: 'NOT    int_field  :2'
    matches: [1, 2, 3]
  - expr: 'NOT  int_field  :  2  '
    matches: [1, 2, 3]
  - expr: 'NOT    int_field:  2  '
    matches: [1, 2, 3]
  - expr: 'NOT   int_field :  2'
    matches: [1, 2, 3]
  - expr: 'NOT    int_field  :  2  '
    matches: [1, 2, 3]

  - expr: '  NOT  int_field:2'
    matches: [1, 2, 3]
  - expr: '  NOT  int_field:2  '
    matches: [1, 2, 3]
  - expr: '  NOT  int_field:  2'
    matches: [1, 2, 3]
  - expr: '  NOT  int_field  :2'
    matches: [1, 2, 3]
  - expr: '  NOT    int_field:2'
    matches: [1, 2, 3]
  - expr: '  NOT  int_field:  2  '
    matches: [1, 2, 3]
  - expr: '  NOT  int_field  :2  '
    matches: [1, 2, 3]
  - expr: '  NOT    int_field:2  '
    matches: [1, 2, 3]
  - expr: '  NOT  int_field  :  2'
    matches: [1, 2, 3]
  - expr: '  NOT    int_field:  2'
    matches: [1, 2, 3]
  - expr: '  NOT    int_field  :2'
    matches: [1, 2, 3]
  - expr: '  NOT  int_field  :  2  '
    matches: [1, 2, 3]
  - expr: '  NOT    int_field:  2  '
    matches: [1, 2, 3]
  - expr: '  NOT   int_field :  2'
    matches: [1, 2, 3]
  - expr: '  NOT    int_field  :  2  '
    matches: [1, 2, 3]

  - description: quotes

  - expr: 'quote_double=a"z'
    error: unterminated quote
  - expr: 'quote_double=a\"z'
    matches: [1]
  - expr: "quote_single=a'z"
    matches: [1]
  - expr: 'quote_double=a\"" "\"z'
    matches: [2]
    skip: true
  - expr: "quote_double='a\"\" \"z'"
    error: unterminated quote
  - expr: "quote_single=a\\'' '\\'z"
    matches: []
    skip: true
  - expr: "quote_single=\"a' 'z\""
    matches: [2]
  - expr: "quote_single=a' 'z"
    matches: []

  - description: key restrictions

  - expr: 'case_field.len():6'
    error: field method functions not supported

  - expr: 'case_field.len()=6'
    error: field method functions not supported

  - expr: case_field.len()<6
    error: field method functions not supported

  - expr: 'int_field.error()=0'
    error: field method functions not supported

  - description: global restriction functions

  - expr: len(junk)
    error: global restriction functions not supported

  - expr: 'len(junk)=4'
    error: global restriction functions not supported

  - expr: len
    matches: []

  - expr: len (junk)
    matches: []

  - expr: len OR (junk)
    matches: []

  - expr: len (abc)
    matches: []

  - expr: len OR (abc)
    matches: [2, 3]

  - expr: len OR abc
    matches: [2, 3]

  - description: global restrictions

  - expr: abc
    matches: [2, 3]

  - expr: pdq
    matches: []
    skip: true

  - expr: xyz
    matches: [1, 3]

  - expr: 'yz'
    matches: [1, 3]

  - expr: abc pdq
    matches: []
    skip: true

  - expr: abc xyz
    matches: [3]

  - expr: pdq xyz
    matches: []
    skip: true

  - expr: abc pdq xyz
    matches: []
    skip: true

  - expr: abc OR pdq
    matches: [2, 3]

  - expr: abc OR xyz
    matches: [1, 2, 3]

  - expr: pdq OR xyz
    matches: [1, 3]

  - expr: abc OR pdq OR xyz
    matches: [1, 2, 3]

  - expr: (abc)
    matches: [2, 3]

  - expr: (xyz)
    matches: [1, 3]

  - expr: abc (xyz)
    matches: [3]

  - expr: (abc) xyz
    matches: [3]

  - expr: (abc) (xyz)
    matches: [3]

  - description: logical operators are upper case only

  - expr: and
    matches: [1]

  - expr: not
    matches: []

  - expr: or
    matches: [2, 3]
    skip: true

  - description: bad key OK global restriction

  - expr: .
    matches: [1, 2, 3]
    skip: true

  - expr: ..
    matches: []
    skip: true

  - expr: ...
    matches: []
    skip: true

  - expr: .foo
    matches: []
    skip: true

  - expr: foo.
    matches: []
    skip: true

  - expr: foo..bar
    matches: []
    skip: true

  - description: syntax errors

  - expr: AND
    error: invalid term

  - expr: NOT
    error: invalid term

  - expr: OR
    error: invalid term

  - expr: ..len()
    error: key syntax

  - expr: .foo.len()
    error: key syntax

  - expr: foo..len()
    error: key syntax

  - expr: foo..bar.len()
    error: key syntax

  - expr: foo.len(
    error: key syntax

  - expr: foo.len)
    error: key syntax

  - expr: (
    error: unbalanced parentheses

  - expr: )
    error: unbalanced parentheses

  - expr: ':'
    error: invalid term

  - expr: 'foo:'
    error: invalid term

  - expr: ':bar'
    error: invalid term

  - expr: ':.foo'
    error: invalid term

  - expr: 'foo> ('
    error: invalid term / unbalanced patentheses

  - expr: 'foo>bar ('
    error: invalid term / unbalanced patentheses

  - expr: foo )
    error: unbalanced patentheses

  - expr: 'foo> )'
    error: invalid term / unbalanced patentheses

  - expr: 'foo>bar )'
    error: invalid term / unbalanced patentheses

  - expr: '"'
    error: dangling quote

  - expr: "'"
    matches: []
    skip: true

  - expr: 'foo:"bar'
    error: dangling quote

  - expr: foo<(bar)
    error: invalid operand

  - expr: 'foo>(bar baz)'
    error: invalid operand

  - expr: 'a!b'
    error: invalid operator

  - expr: 'a!!b'
    error: invalid operator

  - expr: 'a!:b'
    error: invalid operator

  - expr: 'a!<b'
    error: invalid operator

  - expr: 'a!>b'
    error: invalid operator

  - expr: 'a:!b'
    error: invalid operator

  - expr: 'a::b'
    error: invalid operator

  - expr: 'a:=b'
    error: invalid operator

  - expr: 'a:<b'
    error: invalid operator

  - expr: 'a:>b'
    error: invalid operator

  - expr: 'a=!b'
    error: invalid operator

  - expr: 'a=:b'
    error: invalid operator

  - expr: 'a==b'
    error: invalid operator

  - expr: 'a=<b'
    error: invalid operator

  - expr: 'a=>b'
    error: invalid operator

  - expr: 'a<!b'
    error: invalid operator

  - expr: 'a<:b'
    error: invalid operator

  - expr: a<<b
    error: invalid operator

  - expr: 'a<>b'
    error: invalid operator

  - expr: 'a>!b'
    error: invalid operator

  - expr: 'a>:b'
    error: invalid operator

  - expr: 'a><b'
    error: invalid operator

  - expr: 'a>>b'
    error: invalid operator

  - expr: 'a:"b'
    error: unterminated quote

  - expr: "a:'b"
    error: unterminated quote

  - expr: 'a:\"b"'
    error: unterminated quote

  - expr: '>1'
    error: invalid term

  - expr: 'NOT >1'
    error: invalid term

  - expr: 'a = NOT b'
    error: logical operator not expected

  - expr: 'a = AND b'
    error: logical operator not expected

  - expr: 'a = OR b'
    error: logical operator not expected

  - expr: a.foo()
    error: field method functions not supported

  - expr: 'a:b OR'
    error: more tokens expected

  - expr: 'a:b AND'
    error: more tokens expected

  - expr: 'a:b NOT'
    error: more tokens expected

  - expr: 'a: OR b:1'
    error: invalid term

  - expr: 'a: AND b:1'
    error: invalid term

  - expr: 'a: NOT b:1'
    error: invalid term

  - expr: 'a:b ('
    error: unbalanced parentheses

  - expr: 'a:b )'
    error: unbalanced parentheses

  - expr: 'a:b ()'
    error: empty parenthesis group

  - expr: '<'
    error: key and operand expected

  - expr: 'a<'
    error: operand expected

  - expr: 'a< <'
    error: operand expected

  - expr: 'a<b<c'
    error: key expected

  - expr: 'a<b<c '
    error: key expected

  - expr: 'a<b< c'
    error: key expected

  - expr: 'a<b< c '
    error: key expected

  - expr: 'a<b <c'
    error: key expected

  - expr: 'a<b < c'
    error: key expected

  - expr: 'a<b < c '
    error: key expected

  - expr: ' a < b < c '
    error: key expected

  - expr: ' a <= b <= c '
    error: key expected

  - expr: ' a = b = c '
    error: key expected

  - expr: ' a != b != c '
    error: key expected

  - expr: ' a : b : c '
    error: key expected

  - expr: ' a >= b >= c '
    error: key expected

  - expr: ' a > b > c '
    error: key expected

  - expr: ' -a = -b = -c '
    error: key expected

  - description: 'case insensitive : string space separated list match'

  - expr: 'case_field:(string error)'
    matches: []

  - expr: 'case_field:(string STRING)'
    matches: [1, 2, 3]

  - expr: 'case_field:(String Error)'
    matches: []

  - expr: 'case_field:(no match)'
    matches: []

  - expr: 'case_field:(No Match)'
    matches: []

  - expr: 'undefined:(string error)'
    matches: []

  - expr: 'undefined:(String Error)'
    matches: []

  - expr: 'undefined:(no match)'
    matches: []

  - expr: 'undefined:(No Match)'
    matches: []

  - description: 'case insensitive : string AND separated list match'

  - expr: 'case_field:(string AND error)'
    matches: []

  - expr: 'case_field:(String AND Error)'
    matches: []

  - expr: 'case_field:(no AND match)'
    matches: []

  - expr: 'case_field:(No AND Match)'
    matches: []

  - description: 'case insensitive : string OR separated list match'

  - expr: 'case_field:(string OR error)'
    matches: [1, 2, 3]

  - expr: 'case_field:(String OR Error)'
    matches: [1, 2, 3]

  - expr: 'case_field:(no OR match)'
    matches: []

  - expr: 'case_field:(No OR Match)'
    matches: []

  - expr: 'logical:(string OR error)'
    matches: []

  - expr: 'logical:(String OR Error)'
    matches: []

  - expr: 'logical:(abc OR XYZ)'
    matches: []

  - expr: 'logical:(ABC OR xyz)'
    matches: []

  - expr: 'logical:(a* OR *Z)'
    error: suffix matching not supported

  - expr: 'logical:(aaa OR X*)'
    matches: []

  - expr: 'logical:(aaa OR *Z)'
    error: suffix matching not supported

  - expr: 'undefined:(string OR error)'
    matches: []

  - expr: 'undefined:(String OR Error)'
    matches: []

  - expr: 'undefined:(no OR match)'
    matches: []

  - expr: 'undefined:(No OR Match)'
    matches: []

  - description: 'composite : word matching'

  - expr: 'words:(jack jill)'
    matches: [1]

  - expr: 'words:(and or)'
    matches: []

  - expr: 'words:(and OR or)'
    matches: [1, 2]

  - expr: 'words:(jill OR good OR boat)'
    matches: [1, 2, 3]

  - expr: 'words:("and JILL" OR "bigger boat")'
    matches: [1, 3]

  - expr: 'words:(go*)'
    matches: []
  - expr: 'words:(b*)'
    matches: []
  - expr: 'words:(b* g*)'
    matches: []
  - expr: 'words:(b* AND g*)'
    matches: []
  - expr: 'words:(NOT G*)'
    matches: [1, 2, 3]

  - description: '(...) set operands for :'

  - expr: 'compound.str.array:(ab)'
    matches: []

  - expr: 'compound.str.array:(ab*)'
    matches: []

  - expr: 'compound.num.array:(1)'
    matches: [1]

  - expr: 'compound.str.array:(abc)'
    matches: []

  - description: '(...AND...) set operands for :'

  - expr: 'compound.num.array:(aaa AND 1 AND zzz)'
    error: operand type mismatch

  - expr: 'compound.num.array:(1 AND 23 AND 456)'
    matches: [1]

  - expr: 'compound.num.array:(-123 AND 1 AND 789)'
    matches: []

  - expr: 'compound.num.array:(-10 AND 10)'
    matches: [3]

  - expr: 'compound.str.array:(aaa AND abc AND zzz)'
    matches: []

  - expr: 'compound.str.array:(  aaa AND zzz )'
    matches: []

  - description: '(...OR...) set operands for :'

  - expr: 'compound.num.array:(aaa OR 1 OR zzz)'
    error: operand type mismatch

  - expr: 'compound.num.array:(-123 OR 1 OR 789)'
    matches: [1, 2]

  - expr: "compound.num.array:(-123\n1\n789)"
    matches: []

  - expr: 'compound.num.array:( -123 OR 5 OR 789 )'
    matches: [2]

  - expr: 'compound.num.array:(  -123 OR 789 )'
    matches: [2]

  - expr: 'compound.str.array:(aaa OR abc OR zzz)'
    matches: []

  - expr: "compound.str.array:(aaa\nabc\nzzz)"
    matches: []

  - expr: 'compound.str.array:(  aaa OR zzz )'
    matches: []

  - description: '(...) set operands for ='

  - expr: 'compound.num.array=(1)'
    matches: [1]

  - expr: 'compound.num.array=(-123 1 789)'
    matches: []

  - expr: "compound.num.array=(-123\n1\n789)"
    matches: []

  - expr: 'compound.num.array=(  456 )'
    matches: [1, 2]

  - expr: 'compound.num.array=(  23  456 )'
    matches: [1]

  - expr: 'compound.num.array=(3)'
    matches: []

  - expr: 'compound.num.array=(-123 3 789)'
    matches: []

  - expr: 'compound.num.array=(23 456)'
    matches: [1]

  - expr: "compound.num.array=(-123\n3\n789)"
    matches: []

  - expr: 'compound.num.array=(  -123  3  789 )'
    matches: []

  - expr: 'compound.num.array=(  -123  5  789 )'
    matches: []

  - expr: 'compound.num.array=( NOT 123 789 )'
    matches: [2]

  - expr: 'compound.num.array=( -123 789 )'
    matches: []

  - expr: 'compound.num.array=( -10 10 )'
    matches: [3]

  - expr: 'compound.str.array=(abc)'
    matches: []

  - expr: 'compound.str.array=(aaa abc zzz)'
    matches: []

  - expr: "compound.str.array=(aaa\nabc\nzzz)"
    matches: []

  - expr: 'compound.str.array=(  aaa  abc  zzz )'
    matches: []

  - expr: 'compound.str.array=(ab)'
    matches: []

  - expr: 'compound.str.array=(aaa,ab,zzz)'
    matches: []
    skip: true

  - expr: 'compound.str.array=(aaa, ab, zzz)'
    matches: []
    skip: true

  - expr: 'compound.str.array=(aaa ab zzz)'
    matches: []

  - expr: "compound.str.array=(aaa\nab\nzzz)"
    matches: []

  - expr: 'compound.str.array=(  aaa  ab  zzz )'
    matches: []

  - expr: 'compound.str.array=(  aaa  zzz )'
    matches: []

  - description: '(...) set operands for !='

  - expr: 'compound.num.array!=(1 23)'
    matches: [1, 2, 3]
    skip: true

  - expr: 'compound.num.array!=(-456 -789)'
    matches: [1, 2, 3]

  - description: is the - unary spacy or not

  - expr: '-  int_field:2'
    matches: [1, 2, 3]

  - expr: '-  int_field:2  '
    matches: [1, 2, 3]

  - expr: '-  int_field:  2'
    matches: [1, 2, 3]

  - expr: '-  int_field  :2'
    matches: [1, 2, 3]

  - expr: '-  int_field:  2  '
    matches: [1, 2, 3]

  - expr: '- int_field :  2'
    matches: [1, 2, 3]

  - expr: '-  int_field  :  2  '
    matches: [1, 2, 3]

  - expr: '  -  int_field:2'
    matches: [1, 2, 3]

  - expr: '  -  int_field:2  '
    matches: [1, 2, 3]

  - expr: '  -  int_field:  2'
    matches: [1, 2, 3]

  - expr: '  -  int_field  :2'
    matches: [1, 2, 3]

  - expr: '  -  int_field:  2  '
    matches: [1, 2, 3]

  - expr: '  - int_field :  2'
    matches: [1, 2, 3]

  - expr: '  -  int_field  :  2  '
    matches: [1, 2, 3]

  - expr: '  -    int_field:2'
    matches: [1, 2, 3]

  - expr: '  -  int_field  :2  '
    matches: [1, 2, 3]

  - expr: '  -    int_field:2  '
    matches: [1, 2, 3]

  - expr: '  -  int_field  :  2'
    matches: [1, 2, 3]

  - expr: '  -    int_field:  2'
    matches: [1, 2, 3]

  - expr: '  -    int_field  :2'
    matches: [1, 2, 3]

  - expr: '  -    int_field:  2  '
    matches: [1, 2, 3]

  - expr: '  -   int_field :  2'
    matches: [1, 2, 3]

  - expr: '  -    int_field  :  2  '
    matches: [1, 2, 3]

  - description: should we not disallow not not?

  - expr: 'NOT -bool_field:false'
    matches: [1, 3]

  - expr: 'NOT -boolField:false'
    matches: [1, 3]

  - expr: 'NOT -bool_field:true'
    matches: [2]

  - expr: 'NOT -boolField:true'
    matches: [2]

  - expr: 'NOT NOT bool_field:false'
    matches: [1, 3]

  - expr: 'NOT NOT boolField:false'
    matches: [1, 3]

  - expr: 'NOT NOT bool_field:true'
    matches: [2]

  - expr: 'NOT NOT boolField:true'
    matches: [2]

  - expr: '--bool_field:false'
    matches: [1, 3]
    skip: true

  - expr: '--boolField:false'
    matches: [1, 3]
    skip: true

  - expr: '--bool_field:true'
    matches: [2]
    skip: true

  - expr: '--boolField:true'
    matches: [2]
    skip: true

  - expr: 'NOT -bool_field=false'
    matches: [1, 3]

  - expr: 'NOT -boolField=false'
    matches: [1, 3]

  - expr: 'NOT -bool_field=true'
    matches: [2]

  - expr: 'NOT -boolField=true'
    matches: [2]

  - expr: 'NOT NOT bool_field=false'
    matches: [1, 3]

  - expr: 'NOT NOT boolField=false'
    matches: [1, 3]

  - expr: 'NOT NOT bool_field=true'
    matches: [2]

  - expr: 'NOT NOT boolField=true'
    matches: [2]

  - expr: '--bool_field=false'
    matches: [1, 3]
    skip: true

  - expr: '--boolField=false'
    matches: [1, 3]
    skip: true

  - expr: '--bool_field=true'
    matches: [2]
    skip: true

  - expr: '--boolField=true'
    matches: [2]
    skip: true

  - expr: 'NOT -int_field=0'
    matches: [1]

  - expr: 'NOT -intField=0'
    matches: [1]

  - expr: 'NOT -int_field=1'
    matches: [2]

  - expr: 'NOT -intField=1'
    matches: [2]

  - expr: 'NOT NOT int_field=0'
    matches: [1]

  - expr: 'NOT NOT intField=0'
    matches: [1]

  - expr: 'NOT NOT int_field=1'
    matches: [2]

  - expr: 'NOT NOT intField=1'
    matches: [2]

  - expr: '--int_field=0'
    matches: [1]
    skip: true

  - expr: '--intField=0'
    matches: [1]
    skip: true

  - expr: '--int_field=1'
    matches: [2]
    skip: true

  - expr: '--intField=1'
    matches: [2]
    skip: true

  - expr: 'NOT -bool_field!=false'
    matches: [2]

  - expr: 'NOT -boolField!=false'
    matches: [2]

  - expr: 'NOT -bool_field!=true'
    matches: [1, 3]

  - expr: 'NOT -boolField!=true'
    matches: [1, 3]

  - expr: 'NOT NOT bool_field!=false'
    matches: [2]

  - expr: 'NOT NOT boolField!=false'
    matches: [2]

  - expr: 'NOT NOT bool_field!=true'
    matches: [1, 3]

  - expr: 'NOT NOT boolField!=true'
    matches: [1, 3]

  - expr: '--bool_field!=false'
    matches: [2]
    skip: true

  - expr: '--boolField!=false'
    matches: [2]
    skip: true

  - expr: '--bool_field!=true'
    matches: [1, 3]
    skip: true

  - expr: '--boolField!=true'
    matches: [1, 3]
    skip: true

  - expr: 'NOT -int_field!=0'
    matches: [2, 3]

  - expr: 'NOT -intField!=0'
    matches: [2, 3]

  - expr: 'NOT -int_field!=1'
    matches: [1, 3]

  - expr: 'NOT -intField!=1'
    matches: [1, 3]

  - expr: 'NOT NOT int_field!=0'
    matches: [2, 3]

  - expr: 'NOT NOT intField!=0'
    matches: [2, 3]

  - expr: 'NOT NOT int_field!=1'
    matches: [1, 3]

  - expr: 'NOT NOT intField!=1'
    matches: [1, 3]

  - expr: '--int_field!=0'
    matches: [2, 3]
    skip: true

  - expr: '--intField!=0'
    matches: [2, 3]
    skip: true

  - expr: '--int_field!=1'
    matches: [1, 3]
    skip: true

  - expr: '--intField!=1'
    matches: [1, 3]
    skip: true

  - expr: 'NOT NOT int_field:3'
    matches: []

  - expr: 'NOT NOT int_field:2'
    matches: []

  - expr: 'NOT NOT int_field:1'
    matches: [2]

  - expr: 'NOT NOT int_field:-1'
    matches: [3]

  - expr: 'NOT -int_field:3'
    matches: []

  - expr: 'NOT -int_field:2'
    matches: []

  - expr: 'NOT -int_field:1'
    matches: [2]

  - expr: 'NOT -int_field:-1'
    matches: [3]

  - description: datetime literals

  - expr: 'timestamp_field<1980-01-01'
    matches: [1]

  - expr: 'timestamp_field>2008-01-01'
    matches: [2, 3]

  - expr: 'timestamp_field>2010-01-01'
    matches: [3]

  - expr: 'timestamp_field>"January 2016" timestamp_field<2016-09-01'
    matches: [3]

  - expr: timestamp_field<-p1m
    matches: [1, 2, 3]
    skip: true

  - expr: timestamp_field<-p1y
    matches: [1, 2, 3]
    skip: true

  - description: numeric tokens

  - expr: 'int_field=+1'
    matches: [2]
    skip: true
  - expr: 'int_field=1.2'
    error: mismatched operand type
  - expr: 'int_field=1.2.3'
    error: invalid floating point literal

  - expr: 'float_field=0.5'
    matches: [2]
  - expr: 'float_field=+.5'
    matches: [2]
    skip: true

  - expr: 'float_field=-0.5'
    matches: [3]
  - expr: 'float_field=0.0'
    matches: [1]
  - expr: 'float_field=+0.0'
    matches: [1]
    skip: true

  - expr: 'float_field=-0.0'
    matches: [1]

  - expr: 'float_field=0.5.0'
    error: invalid floating point literal

  - description: compound name tokens

  - expr: 'compound.int_field=123'
    matches: [1]
  - expr: 'compound.int_field=456'
    matches: [2]
  - expr: 'compound.int_field=+456'
    matches: [2]
    skip: true

  - expr: 'compound.int_field=-1'
    matches: []
  - expr: 'compound.int_field=-123'
    matches: [3]
  - expr: 'compound.int_field=-12*'
    error: prefix matching only supported for string values

  - description: quoted tokens

  - expr: ' " '
    error: unterminated quote

  - expr: ' "int_field" = 1 '
    matches: [2]

  - expr: ' compound."int_field" = 123 '
    matches: [1]

  - expr: ' "compound"."int_field" = 123 '
    matches: [1]

  - expr: ' compound.string_field : eggman '
    matches: [1]
  - expr: ' compound.string_field : "eggman" '
    matches: [1]
  - expr: ' compound.string_field : eggmen '
    matches: [2]
  - expr: ' compound.string_field : egg"men" '
    matches: [2]
    skip: true

  - expr: ' compound.string_field : wal\"rus '
    matches: [3]

  - expr: ' compound.string_field : wal"\""rus '
    matches: [3]

  - expr: ' compound.string_field : "wal\"rus" '
    matches: [3]
  - expr: ' compound.string_field : egg""man '
    matches: [1]
    skip: true

  - expr: ' compound.string_field : "egg""men" '
    matches: [2]
    skip: true

  - description: global restriction tokens

  - expr: ' \" '
    matches: [1, 2, 3]

  - expr: ' 123 '
    matches: [1, 2, 3]
    skip: true

  - expr: ' 23 '
    matches: [1, 2, 3]
    skip: true

  - expr: ' -123 '
    matches: [3]

  - expr: ' "123" '
    matches: [1, 2, 3]
    skip: true

  - expr: ' "-123" '
    matches: [3]

  - expr: ' egg '
    matches: [1, 2]

  - expr: ' "eggman" '
    matches: [1]

  - expr: 'key'
    matches: []

  - expr: '-key'
    matches: [1, 2, 3]

  - expr: 'NOT key'
    matches: [1, 2, 3]

  - expr: 'value'
    matches: []

  - expr: '-value'
    matches: [1, 2, 3]

  - expr: 'NOT value'
    matches: [1, 2, 3]

  - description: unknown field

  - expr: ' "compound.int_field" = 123 '
    error: unknown field

  - description: ': on maps'

  - expr: 'compound.num.dictionary:1'
    matches: []

  - expr: 'compound.num.dictionary:3.14'
    matches: []

  - expr: 'compound.num.dictionary:4'
    matches: [3]

  - expr: 'compound.num.dictionary:5'
    matches: []

  - expr: 'compound.num.dictionary:-5'
    matches: [3]

  - expr: 'compound.num.dictionary:Abc'
    error: float operand expected

  - expr: 'compound.num.dictionary:xyz'
    error: float operand expected

  - expr: 'compound.str.dictionary:3.14'
    matches: []

  - expr: 'compound.str.dictionary:5'
    matches: []

  - expr: 'compound.str.dictionary:Abc'
    matches: []

  - expr: 'compound.str.dictionary:abc'
    matches: []

  - expr: 'compound.str.dictionary:ab'
    matches: []

  - expr: 'compound.str.dictionary:ab*'
    matches: []

  - expr: 'compound.str.dictionary:(b)'
    matches: []

  - expr: 'compound.str.dictionary:(ab*)'
    matches: []

  - expr: 'compound.num.dictionary:(1)'
    matches: []

  - expr: 'compound.str.dictionary:(abc)'
    matches: []

  - expr: 'compound.num.dictionary:(aaa AND 1 AND zzz)'
    error: operand type mismatch

  - expr: 'compound.num.dictionary:(123 AND 456 AND 789)'
    matches: [1]

  - expr: 'compound.str.dictionary:(aaa AND abc AND zzz)'
    matches: []

  - expr: 'compound.str.dictionary:(  aaa AND zzz )'
    matches: []

  - expr: 'compound.num.dictionary:(aaa OR 1 OR zzz)'
    error: operand type mismatch

  - expr: 'compound.num.dictionary:(  -999 OR 5 OR 999 )'
    matches: []

  - expr: 'compound.num.dictionary:(  -999 OR 4 OR 999 )'
    matches: [3]

  - expr: 'compound.num.dictionary:(  -999 OR -5 OR 999 )'
    matches: [3]

  - expr: 'compound.num.dictionary:(  -999 OR 999 )'
    matches: []

  - expr: "compound.num.dictionary:(1\n3\n5)"
    matches: []

  - expr: "compound.num.dictionary:(1\n-5\n5)"
    matches: []

  - expr: "compound.num.dictionary:(123\n456\n789)"
    matches: [1]

  - expr: 'compound.str.dictionary:(aaa OR abc OR zzz)'
    matches: []

  - expr: 'compound.str.dictionary:(aaa abc zzz)'
    matches: []

  - expr: "compound.str.dictionary:(aaa\nabc\nzzz)"
    matches: []

  - expr: 'compound.str.dictionary:(  aaa OR zzz )'
    matches: []

  - description: '= on maps'

  - expr: 'compound.str.dictionary=ab'
    matches: []
    skip: true

  - expr: 'compound.num.dictionary=1'
    matches: []
    skip: true

  - expr: 'compound.num.dictionary=(1)'
    matches: []
    skip: true

  - expr: 'compound.num.dictionary=4'
    matches: []
    skip: true

  - expr: 'compound.num.dictionary=(4)'
    matches: []
    skip: true

  - expr: 'compound.num.dictionary=(-5)'
    matches: []
    skip: true

  - expr: 'compound.num.dictionary=-5'
    matches: []
    skip: true

  - expr: 'compound.num.dictionary=(123 456 789)'
    matches: []
    skip: true

  - expr: "compound.num.dictionary=(4\n-5\n0)"
    matches: []
    skip: true

  - expr: 'compound.num.dictionary=(  4  -5  0 )'
    matches: []
    skip: true

  - expr: 'compound.num.dictionary=(3)'
    matches: []
    skip: true

  - expr: 'compound.num.dictionary=(456)'
    matches: []
    skip: true

  - expr: 'compound.num.dictionary=(1 3 5)'
    matches: []
    skip: true

  - expr: "compound.num.dictionary=(1\n3\n5)"
    matches: []
    skip: true

  - expr: "compound.num.dictionary=(1\n-5\n5)"
    matches: []
    skip: true

  - expr: 'compound.num.dictionary=(  aaa  3  zzz )'
    error: operand type mismatch

  - expr: 'compound.str.dictionary=(abc)'
    matches: []

  - expr: 'compound.str.dictionary=(aaa,abc,zzz)'
    matches: []
    skip: true

  - expr: 'compound.str.dictionary=(aaa, abc, zzz)'
    matches: []
    skip: true

  - expr: 'compound.str.dictionary=(aaa abc zzz)'
    matches: []

  - expr: "compound.str.dictionary=(aaa\nabc\nzzz)"
    matches: []

  - expr: 'compound.str.dictionary=(  aaa  abc  zzz )'
    matches: []

  - expr: 'compound.str.dictionary=(ab)'
    matches: []

  - expr: 'compound.str.dictionary=(aaa,ab,zzz)'
    matches: []
    skip: true

  - expr: 'compound.str.dictionary=(aaa, ab, zzz)'
    matches: []
    skip: true

  - expr: 'compound.str.dictionary=(aaa ab zzz)'
    matches: []

  - expr: "compound.str.dictionary=(aaa\nab\nzzz)"
    matches: []

  - expr: 'compound.str.dictionary=(  aaa  ab  zzz )'
    matches: []

  - expr: 'compound.str.dictionary=(  aaa  zzz )'
    matches: []

  - description: 'field:string match'

  - expr: 'compound.string_field:eggman'
    matches: [1]
  - expr: 'compound.string_field:egg'
    matches: []
  - expr: 'compound.string_field:egg*'
    matches: [1, 2]
  - expr: 'compound.string_field:man'
    matches: []
  - expr: 'compound.string_field:*man'
    error: invalid prefix pattern
    skip: true
  - expr: 'compound.string_field:gm'
    matches: []
  - expr: 'compound.string_field:gm*'
    matches: []
  - expr: 'compound.string_field:*gm'
    error: invalid prefix pattern
    skip: true
  - expr: 'compound.string_field:*gm*'
    error: invalid prefix pattern
    skip: true

  - expr: 'compound.string_field:EGGMAN'
    matches: [1]
  - expr: 'compound.string_field:EGG'
    matches: []
  - expr: 'compound.string_field:EGG*'
    matches: [1, 2]
  - expr: 'compound.string_field:MAN'
    matches: []
  - expr: 'compound.string_field:*MAN'
    error: invalid prefix pattern
    skip: true
  - expr: 'compound.string_field:GM'
    matches: []
  - expr: 'compound.string_field:GM*'
    matches: []
  - expr: 'compound.string_field:*GM'
    error: invalid prefix pattern
  - expr: 'compound.string_field:*GM*'
    error: invalid prefix pattern

  - description: 'field=string match'

  - expr: 'compound.string_field=eggman'
    matches: [1]
  - expr: 'compound.string_field=egg'
    matches: []
  - expr: 'compound.string_field=egg*'
    matches: [1, 2]
  - expr: 'compound.string_field=man'
    matches: []
  - expr: 'compound.string_field=*man'
    error: invalid prefix pattern
    skip: true
  - expr: 'compound.string_field=gm'
    matches: []
  - expr: 'compound.string_field=gm*'
    matches: []
  - expr: 'compound.string_field=*gm'
    error: invalid prefix pattern
  - expr: 'compound.string_field=*gm*'
    error: invalid prefix pattern

  - expr: 'compound.string_field=EGGMAN'
    matches: [1]
  - expr: 'compound.string_field=EGG'
    matches: []
  - expr: 'compound.string_field=EGG*'
    matches: [1, 2]
  - expr: 'compound.string_field=MAN'
    matches: []
  - expr: 'compound.string_field=*MAN'
    error: invalid prefix pattern
    skip: true
  - expr: 'compound.string_field=GM'
    matches: []
  - expr: 'compound.string_field=GM*'
    matches: []
  - expr: 'compound.string_field=*GM'
    error: invalid prefix pattern
  - expr: 'compound.string_field=*GM*'
    error: invalid prefix pattern

  - description: 'field:(string) match'

  - expr: 'compound.string_field:(eggman)'
    matches: [1]
  - expr: 'compound.string_field:(egg)'
    matches: []
  - expr: 'compound.string_field:(egg*)'
    matches: [1, 2]
    skip: true
  - expr: 'compound.string_field:(man)'
    matches: []
  - expr: 'compound.string_field:(*man)'
    error: invalid prefix pattern
  - expr: 'compound.string_field:(gm)'
    matches: []
  - expr: 'compound.string_field:(gm*)'
    matches: []
  - expr: 'compound.string_field:(*gm)'
    error: invalid prefix pattern
  - expr: 'compound.string_field:(*gm*)'
    error: invalid prefix pattern

  - expr: 'compound.string_field:(EGGMAN)'
    matches: [1]
  - expr: 'compound.string_field:(EGG)'
    matches: []
  - expr: 'compound.string_field:(EGG*)'
    matches: [1, 2]
    skip: true
  - expr: 'compound.string_field:(MAN)'
    matches: []
  - expr: 'compound.string_field:(*MAN)'
    error: invalid prefix pattern
  - expr: 'compound.string_field:(GM)'
    matches: []
  - expr: 'compound.string_field:(GM*)'
    matches: []

  - expr: 'compound.string_field:(*GM)'
    error: invalid prefix pattern
  - expr: 'compound.string_field:(*GM*)'
    error: invalid prefix pattern

  - description: 'message:(...) scope'

  - expr: 'members.first:bud AND members.last:first'
    matches: [1]
  - expr: 'members:(first:bud AND last:first)'
    matches: []
    skip: true
  - expr: 'members.first:bud AND members.last:uronner'
    matches: [1]
  - expr: 'members:(first:bud AND last:uronner)'
    matches: [1]
    skip: true
  - expr: 'members:(bud AND first)'
    matches: []
    skip: true
  - expr: 'members:(bud AND uronner)'
    matches: [1]
    skip: true

  - description: 'global string match'

  - expr: 'eggman'
    matches: [1]
  - expr: 'egg'
    matches: [1, 2]
  - expr: 'egg*'
    matches: []
  - expr: 'man'
    matches: [1]
  - expr: '*man'
    matches: []
  - expr: 'gm'
    matches: [1, 2]
  - expr: 'gm*'
    matches: []
  - expr: '*gm'
    matches: []
  - expr: '*gm*'
    matches: []

  - expr: 'EGGMAN'
    matches: [1]
  - expr: 'EGG'
    matches: [1, 2]
  - expr: 'EGG*'
    matches: []
  - expr: 'MAN'
    matches: [1]
  - expr: '*MAN'
    matches: []
  - expr: 'GM'
    matches: [1, 2]
  - expr: 'GM*'
    matches: []
  - expr: '*GM'
    matches: []
  - expr: '*GM*'
    matches: []

  - description: 'field=unicode normalization'

  - expr: 'unicode_field=résumé'
    matches: [1, 2, 3]
    skip: true
  - expr: 'unicode_field=RESUMÉ'
    matches: [1, 2, 3]
    skip: true
  - expr: 'unicode_field=résume'  # re\u0301sume combining character
    matches: [1, 2, 3]
    skip: true
  - expr: 'unicode_field=resume'
    matches: [1, 2, 3]
    skip: true
  - expr: 'unicode_field=RESUME'
    matches: [1, 2, 3]
    skip: true

  - description: 'global unicode normalization'

  - expr: 'résumé'
    matches: [1, 2, 3]
    skip: true
  - expr: 'RESUMÉ'
    matches: [1, 2, 3]
    skip: true
  - expr: 'resume'
    matches: [1, 2, 3]
    skip: true
  - expr: 'résume'  # re\u0301sume combining character
    matches: [1, 2, 3]
    skip: true
  - expr: 'RESUME'
    matches: [1, 2, 3]
    skip: true

  - description: field exists

  - expr: exists_scalar_int:*
    matches: [3]
  - expr: exists_scalar_string:*
    matches: [3]
  - expr: exists_scalar_message:*
    matches: [3]
  - expr: exists_array_int:*
    matches: [3]
  - expr: exists_array_string:*
    matches: [3]
  - expr: exists_array_message:*
    matches: [3]

  - description: timestamp values

  - expr: 'timestampField<1980-01-01T00\:00\:00.000Z'
    matches: [1]
    skip: true
  - expr: 'timestampField<1980-01-01T00\:00\:00\.000Z'
    matches: [1]
  - expr: 'timestampField<1980-01-01T00":"00":"00.000Z'
    matches: [1]
    skip: true
  - expr: 'timestampField<"1980-01-01T00:00:00.000Z"'
    matches: [1]

  - expr: 'timestampField>2010-01-01T00\:00\:00.000Z'
    matches: [3]
    skip: true
  - expr: 'timestampField>2010-01-01T00\:00\:00\.000Z'
    matches: [3]
  - expr: 'timestampField>2010-01-01T00":"00":"00.000Z'
    matches: [3]
    skip: true
  - expr: 'timestampField>"2010-01-01T00:00:00.000Z"'
    matches: [3]

  - description: comments

  - expr: "--Start\nintField=0 -- Match\nOR intField=-1 -- Match\n-- End"
    matches: [1, 3]
  - expr: "--Empty Filter"
    matches: [1, 2, 3]
  - expr: "  --Empty two-line\n  -- Filter"
    matches: [1, 2, 3]
